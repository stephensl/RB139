# Scrabble Score 

=begin   

Write a program that, given a word, computes the Scrabble score for that word.


You'll need the following tile scores:

Letters &	Values

[A, E, I, O, U, L, N, R, S, T]	=> 1
[D, G] => 2
[B, C, M, P] =>	3
[F, H, V, W, Y] =>	4
[K]	=> 5
[J, X] => 8
[Q, Z] => 10

---
---
---


Problem: 

Given a word, calculate the sum of points generated by each character in the word. Return the sum as an integer.

Input: word (string)
Output: sum (integer)

Rules: 
  - Score zero for: 
    - Empty string 
    - whitespace characters
    - nil 
  - Case insensitive 
  - Return value is integer representing the sum of points


E: test cases provided

  - Constructor method
    - one argument (string)
    - save in constructor 

  - #score instance method 
  
  - ::score class method 
    - accepts one argument 
    - able to call without instantiation Scrabble object
    - returns integer representing score of argument string

Data Structures: 

  - Strings representing words
  - Array of characters for iteration 
  - Hash constant containing character values
  - Integers as score calculations 


Algorithm:

- Define class Scrabble 

  - Define constant CharacterScores
    - build hash with characters in array as keys, score as values

  - Constructor method
    - Accepts one argument (string)
    - save argument to instance variable 

  - #score instance method
    - iterate through characters 
    - check hash for corresponding score 
    - increment score 

  - ::score class method 
    - accepts one argument 
    - same behavior as instance method 

  
Code: 

=end 

class Scrabble 
  CHARACTER_SCORE = {
    %w(a e i o u l n r s t) => 1,
    %w(d g) => 2,
    %w(b c m p) => 3,
    %w(f h v w y) => 4, 
    %w(k) => 5, 
    %w(j x) => 8,
    %w(q z) => 10
  }
  def initialize(str)
    @word = str
  end 

  def score 
    total = 0 

    return total if @word.nil? || whitespace?

    @word.downcase.each_char do |char|
      target_key = CHARACTER_SCORE.keys.select do |char_array|
        char_array.include?(char)
      end.flatten 

      total += CHARACTER_SCORE[target_key]
    end 

    total 
  end 

  def self.score(word)
    total = 0 

    return total if word.nil? || whitespace?(word)

    word.downcase.each_char do |char|
      target_key = CHARACTER_SCORE.keys.select do |char_array|
        char_array.include?(char)
      end.flatten 

      total += CHARACTER_SCORE[target_key]
    end 

    total 
  end 

  private

  def whitespace?
    @word.match?(/( |\\t|\\n)/)
  end 

  def self.whitespace?(word)
    word.match?(/( |\\t|\\n)/)
  end 
end 


# Testing via 'tests_easy_5.rb'

# Run options: --seed 1074

# # Running:

# .........

# Finished in 0.018322s, 491.2154 runs/s, 491.2154 assertions/s.

# 9 runs, 9 assertions, 0 failures, 0 errors, 0 skips



